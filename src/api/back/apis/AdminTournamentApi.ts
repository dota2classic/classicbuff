/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  CreateTournamentDto,
  CreateTournamentDtoFromJSON,
  CreateTournamentDtoToJSON,
  TournamentDto,
  TournamentDtoFromJSON,
  TournamentDtoToJSON
} from "../models";

export interface AdminTournamentControllerCreateTournamentRequest {
  createTournamentDto: CreateTournamentDto;
}

/**
 *
 */
export class AdminTournamentApi extends runtime.BaseAPI {
  /**
   */
  private async adminTournamentControllerCreateTournamentRaw(
    requestParameters: AdminTournamentControllerCreateTournamentRequest
  ): Promise<runtime.ApiResponse<TournamentDto>> {
    this.adminTournamentControllerCreateTournamentValidation(requestParameters);
    const context = this.adminTournamentControllerCreateTournamentContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TournamentDtoFromJSON(jsonValue));
  }

  /**
   */
  private adminTournamentControllerCreateTournamentValidation(
    requestParameters: AdminTournamentControllerCreateTournamentRequest
  ) {
    if (requestParameters.createTournamentDto === null || requestParameters.createTournamentDto === undefined) {
      throw new runtime.RequiredError(
        "createTournamentDto",
        "Required parameter requestParameters.createTournamentDto was null or undefined when calling adminTournamentControllerCreateTournament."
      );
    }
  }

  /**
   */
  adminTournamentControllerCreateTournamentContext(
    requestParameters: AdminTournamentControllerCreateTournamentRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/v1/admin/tournament/create_tournament`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateTournamentDtoToJSON(requestParameters.createTournamentDto)
    };
  }

  /**
   */
  adminTournamentControllerCreateTournament = async (
    createTournamentDto: CreateTournamentDto
  ): Promise<TournamentDto> => {
    const response = await this.adminTournamentControllerCreateTournamentRaw({
      createTournamentDto: createTournamentDto
    });
    return await response.value();
  };
}
