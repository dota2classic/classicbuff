/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  CreateTeamDto,
  CreateTeamDtoFromJSON,
  CreateTeamDtoToJSON,
  SubmitInviteDto,
  SubmitInviteDtoFromJSON,
  SubmitInviteDtoToJSON,
  TeamDto,
  TeamDtoFromJSON,
  TeamDtoToJSON,
  TeamInvitationDto,
  TeamInvitationDtoFromJSON,
  TeamInvitationDtoToJSON,
  TournamentDto,
  TournamentDtoFromJSON,
  TournamentDtoToJSON
} from "../models";

export interface TeamControllerCreateTeamRequest {
  createTeamDto: CreateTeamDto;
}

export interface TeamControllerGetTeamRequest {
  id: string;
}

export interface TeamControllerGetTeamTournamentsRequest {
  id: string;
}

export interface TeamControllerInviteToTeamRequest {
  steamId: string;
}

export interface TeamControllerKickFromTeamRequest {
  steamId: string;
}

export interface TeamControllerSubmitInviteRequest {
  id: number;
  submitInviteDto: SubmitInviteDto;
}

/**
 *
 */
export class TeamApi extends runtime.BaseAPI {
  /**
   */
  private async teamControllerCreateTeamRaw(
    requestParameters: TeamControllerCreateTeamRequest
  ): Promise<runtime.ApiResponse<TeamDto>> {
    this.teamControllerCreateTeamValidation(requestParameters);
    const context = this.teamControllerCreateTeamContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TeamDtoFromJSON(jsonValue));
  }

  /**
   */
  private teamControllerCreateTeamValidation(requestParameters: TeamControllerCreateTeamRequest) {
    if (requestParameters.createTeamDto === null || requestParameters.createTeamDto === undefined) {
      throw new runtime.RequiredError(
        "createTeamDto",
        "Required parameter requestParameters.createTeamDto was null or undefined when calling teamControllerCreateTeam."
      );
    }
  }

  /**
   */
  teamControllerCreateTeamContext(requestParameters: TeamControllerCreateTeamRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/create_team`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateTeamDtoToJSON(requestParameters.createTeamDto)
    };
  }

  /**
   */
  teamControllerCreateTeam = async (createTeamDto: CreateTeamDto): Promise<TeamDto> => {
    const response = await this.teamControllerCreateTeamRaw({ createTeamDto: createTeamDto });
    return await response.value();
  };

  /**
   */
  private async teamControllerGetInvitesRaw(): Promise<runtime.ApiResponse<Array<TeamInvitationDto>>> {
    this.teamControllerGetInvitesValidation();
    const context = this.teamControllerGetInvitesContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TeamInvitationDtoFromJSON));
  }

  /**
   */
  private teamControllerGetInvitesValidation() {}

  /**
   */
  teamControllerGetInvitesContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/view_invites`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerGetInvites = async (): Promise<Array<TeamInvitationDto>> => {
    const response = await this.teamControllerGetInvitesRaw();
    return await response.value();
  };

  useTeamControllerGetInvites(config?: ConfigInterface<Array<TeamInvitationDto>, Error>) {
    let valid = true;

    const context = this.teamControllerGetInvitesContext();
    return useSWR(JSON.stringify(context), valid ? () => this.teamControllerGetInvites() : undefined, config);
  }

  /**
   */
  private async teamControllerGetTeamRaw(
    requestParameters: TeamControllerGetTeamRequest
  ): Promise<runtime.ApiResponse<TeamDto>> {
    this.teamControllerGetTeamValidation(requestParameters);
    const context = this.teamControllerGetTeamContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TeamDtoFromJSON(jsonValue));
  }

  /**
   */
  private teamControllerGetTeamValidation(requestParameters: TeamControllerGetTeamRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling teamControllerGetTeam."
      );
    }
  }

  /**
   */
  teamControllerGetTeamContext(requestParameters: TeamControllerGetTeamRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/team/view/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerGetTeam = async (id: string): Promise<TeamDto> => {
    const response = await this.teamControllerGetTeamRaw({ id: id });
    return await response.value();
  };

  useTeamControllerGetTeam(id: string, config?: ConfigInterface<TeamDto, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.teamControllerGetTeamContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.teamControllerGetTeam(id!) : undefined, config);
  }

  /**
   */
  private async teamControllerGetTeamTournamentsRaw(
    requestParameters: TeamControllerGetTeamTournamentsRequest
  ): Promise<runtime.ApiResponse<Array<TournamentDto>>> {
    this.teamControllerGetTeamTournamentsValidation(requestParameters);
    const context = this.teamControllerGetTeamTournamentsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TournamentDtoFromJSON));
  }

  /**
   */
  private teamControllerGetTeamTournamentsValidation(requestParameters: TeamControllerGetTeamTournamentsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling teamControllerGetTeamTournaments."
      );
    }
  }

  /**
   */
  teamControllerGetTeamTournamentsContext(
    requestParameters: TeamControllerGetTeamTournamentsRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/team/tournament_list/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerGetTeamTournaments = async (id: string): Promise<Array<TournamentDto>> => {
    const response = await this.teamControllerGetTeamTournamentsRaw({ id: id });
    return await response.value();
  };

  useTeamControllerGetTeamTournaments(id: string, config?: ConfigInterface<Array<TournamentDto>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.teamControllerGetTeamTournamentsContext({ id: id! });
    return useSWR(
      JSON.stringify(context),
      valid ? () => this.teamControllerGetTeamTournaments(id!) : undefined,
      config
    );
  }

  /**
   */
  private async teamControllerInviteToTeamRaw(
    requestParameters: TeamControllerInviteToTeamRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.teamControllerInviteToTeamValidation(requestParameters);
    const context = this.teamControllerInviteToTeamContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private teamControllerInviteToTeamValidation(requestParameters: TeamControllerInviteToTeamRequest) {
    if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
      throw new runtime.RequiredError(
        "steamId",
        "Required parameter requestParameters.steamId was null or undefined when calling teamControllerInviteToTeam."
      );
    }
  }

  /**
   */
  teamControllerInviteToTeamContext(requestParameters: TeamControllerInviteToTeamRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/invite_to_team/{steam_id}`.replace(
        `{${"steam_id"}}`,
        encodeURIComponent(String(requestParameters.steamId))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerInviteToTeam = async (steamId: string): Promise<void> => {
    await this.teamControllerInviteToTeamRaw({ steamId: steamId });
  };

  /**
   */
  private async teamControllerKickFromTeamRaw(
    requestParameters: TeamControllerKickFromTeamRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.teamControllerKickFromTeamValidation(requestParameters);
    const context = this.teamControllerKickFromTeamContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private teamControllerKickFromTeamValidation(requestParameters: TeamControllerKickFromTeamRequest) {
    if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
      throw new runtime.RequiredError(
        "steamId",
        "Required parameter requestParameters.steamId was null or undefined when calling teamControllerKickFromTeam."
      );
    }
  }

  /**
   */
  teamControllerKickFromTeamContext(requestParameters: TeamControllerKickFromTeamRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/kick_from_team/{steam_id}`.replace(
        `{${"steam_id"}}`,
        encodeURIComponent(String(requestParameters.steamId))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerKickFromTeam = async (steamId: string): Promise<void> => {
    await this.teamControllerKickFromTeamRaw({ steamId: steamId });
  };

  /**
   */
  private async teamControllerLeaveTeamRaw(): Promise<runtime.ApiResponse<void>> {
    this.teamControllerLeaveTeamValidation();
    const context = this.teamControllerLeaveTeamContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private teamControllerLeaveTeamValidation() {}

  /**
   */
  teamControllerLeaveTeamContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/leave_team`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerLeaveTeam = async (): Promise<void> => {
    await this.teamControllerLeaveTeamRaw();
  };

  /**
   */
  private async teamControllerListTeamsRaw(): Promise<runtime.ApiResponse<Array<TeamDto>>> {
    this.teamControllerListTeamsValidation();
    const context = this.teamControllerListTeamsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TeamDtoFromJSON));
  }

  /**
   */
  private teamControllerListTeamsValidation() {}

  /**
   */
  teamControllerListTeamsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/team/list`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerListTeams = async (): Promise<Array<TeamDto>> => {
    const response = await this.teamControllerListTeamsRaw();
    return await response.value();
  };

  useTeamControllerListTeams(config?: ConfigInterface<Array<TeamDto>, Error>) {
    let valid = true;

    const context = this.teamControllerListTeamsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.teamControllerListTeams() : undefined, config);
  }

  /**
   */
  private async teamControllerSubmitInviteRaw(
    requestParameters: TeamControllerSubmitInviteRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.teamControllerSubmitInviteValidation(requestParameters);
    const context = this.teamControllerSubmitInviteContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private teamControllerSubmitInviteValidation(requestParameters: TeamControllerSubmitInviteRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling teamControllerSubmitInvite."
      );
    }
    if (requestParameters.submitInviteDto === null || requestParameters.submitInviteDto === undefined) {
      throw new runtime.RequiredError(
        "submitInviteDto",
        "Required parameter requestParameters.submitInviteDto was null or undefined when calling teamControllerSubmitInvite."
      );
    }
  }

  /**
   */
  teamControllerSubmitInviteContext(requestParameters: TeamControllerSubmitInviteRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/submit_invite/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SubmitInviteDtoToJSON(requestParameters.submitInviteDto)
    };
  }

  /**
   */
  teamControllerSubmitInvite = async (id: number, submitInviteDto: SubmitInviteDto): Promise<void> => {
    await this.teamControllerSubmitInviteRaw({ id: id, submitInviteDto: submitInviteDto });
  };
}
