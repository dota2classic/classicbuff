/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  CreateTeamDto,
  CreateTeamDtoFromJSON,
  CreateTeamDtoToJSON,
  TeamDto,
  TeamDtoFromJSON,
  TeamDtoToJSON,
  TournamentDto,
  TournamentDtoFromJSON,
  TournamentDtoToJSON
} from "../models";

export interface TeamControllerCreateTeamRequest {
  createTeamDto: CreateTeamDto;
}

export interface TeamControllerGetTeamRequest {
  id: string;
}

export interface TeamControllerGetTeamTournamentsRequest {
  id: string;
}

/**
 *
 */
export class TeamApi extends runtime.BaseAPI {
  /**
   */
  private async teamControllerCreateTeamRaw(
    requestParameters: TeamControllerCreateTeamRequest
  ): Promise<runtime.ApiResponse<TeamDto>> {
    this.teamControllerCreateTeamValidation(requestParameters);
    const context = this.teamControllerCreateTeamContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TeamDtoFromJSON(jsonValue));
  }

  /**
   */
  private teamControllerCreateTeamValidation(requestParameters: TeamControllerCreateTeamRequest) {
    if (requestParameters.createTeamDto === null || requestParameters.createTeamDto === undefined) {
      throw new runtime.RequiredError(
        "createTeamDto",
        "Required parameter requestParameters.createTeamDto was null or undefined when calling teamControllerCreateTeam."
      );
    }
  }

  /**
   */
  teamControllerCreateTeamContext(requestParameters: TeamControllerCreateTeamRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/team/create_team`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateTeamDtoToJSON(requestParameters.createTeamDto)
    };
  }

  /**
   */
  teamControllerCreateTeam = async (createTeamDto: CreateTeamDto): Promise<TeamDto> => {
    const response = await this.teamControllerCreateTeamRaw({ createTeamDto: createTeamDto });
    return await response.value();
  };

  /**
   */
  private async teamControllerGetTeamRaw(
    requestParameters: TeamControllerGetTeamRequest
  ): Promise<runtime.ApiResponse<TeamDto>> {
    this.teamControllerGetTeamValidation(requestParameters);
    const context = this.teamControllerGetTeamContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TeamDtoFromJSON(jsonValue));
  }

  /**
   */
  private teamControllerGetTeamValidation(requestParameters: TeamControllerGetTeamRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling teamControllerGetTeam."
      );
    }
  }

  /**
   */
  teamControllerGetTeamContext(requestParameters: TeamControllerGetTeamRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/team/view/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerGetTeam = async (id: string): Promise<TeamDto> => {
    const response = await this.teamControllerGetTeamRaw({ id: id });
    return await response.value();
  };

  useTeamControllerGetTeam(id: string, config?: ConfigInterface<TeamDto, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.teamControllerGetTeamContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.teamControllerGetTeam(id!) : undefined, config);
  }

  /**
   */
  private async teamControllerGetTeamTournamentsRaw(
    requestParameters: TeamControllerGetTeamTournamentsRequest
  ): Promise<runtime.ApiResponse<Array<TournamentDto>>> {
    this.teamControllerGetTeamTournamentsValidation(requestParameters);
    const context = this.teamControllerGetTeamTournamentsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TournamentDtoFromJSON));
  }

  /**
   */
  private teamControllerGetTeamTournamentsValidation(requestParameters: TeamControllerGetTeamTournamentsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling teamControllerGetTeamTournaments."
      );
    }
  }

  /**
   */
  teamControllerGetTeamTournamentsContext(
    requestParameters: TeamControllerGetTeamTournamentsRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/team/tournament_list/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerGetTeamTournaments = async (id: string): Promise<Array<TournamentDto>> => {
    const response = await this.teamControllerGetTeamTournamentsRaw({ id: id });
    return await response.value();
  };

  useTeamControllerGetTeamTournaments(id: string, config?: ConfigInterface<Array<TournamentDto>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.teamControllerGetTeamTournamentsContext({ id: id! });
    return useSWR(
      JSON.stringify(context),
      valid ? () => this.teamControllerGetTeamTournaments(id!) : undefined,
      config
    );
  }

  /**
   */
  private async teamControllerListTeamsRaw(): Promise<runtime.ApiResponse<Array<TeamDto>>> {
    this.teamControllerListTeamsValidation();
    const context = this.teamControllerListTeamsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TeamDtoFromJSON));
  }

  /**
   */
  private teamControllerListTeamsValidation() {}

  /**
   */
  teamControllerListTeamsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/team/list`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  teamControllerListTeams = async (): Promise<Array<TeamDto>> => {
    const response = await this.teamControllerListTeamsRaw();
    return await response.value();
  };

  useTeamControllerListTeams(config?: ConfigInterface<Array<TeamDto>, Error>) {
    let valid = true;

    const context = this.teamControllerListTeamsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.teamControllerListTeams() : undefined, config);
  }
}
