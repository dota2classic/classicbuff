/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  BracketDto,
  BracketDtoFromJSON,
  BracketDtoToJSON,
  CompactTeamDto,
  CompactTeamDtoFromJSON,
  CompactTeamDtoToJSON,
  TournamentDto,
  TournamentDtoFromJSON,
  TournamentDtoToJSON
} from "../models";

export interface TournamentControllerGetBracketRequest {
  id: number;
}

export interface TournamentControllerGetTournamentRequest {
  id: number;
}

export interface TournamentControllerTournamentTeamsRequest {
  id: number;
}

/**
 *
 */
export class TournamentApi extends runtime.BaseAPI {
  /**
   */
  private async tournamentControllerGetBracketRaw(
    requestParameters: TournamentControllerGetBracketRequest
  ): Promise<runtime.ApiResponse<BracketDto>> {
    this.tournamentControllerGetBracketValidation(requestParameters);
    const context = this.tournamentControllerGetBracketContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => BracketDtoFromJSON(jsonValue));
  }

  /**
   */
  private tournamentControllerGetBracketValidation(requestParameters: TournamentControllerGetBracketRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling tournamentControllerGetBracket."
      );
    }
  }

  /**
   */
  tournamentControllerGetBracketContext(requestParameters: TournamentControllerGetBracketRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/tournament/bracket/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tournamentControllerGetBracket = async (id: number): Promise<BracketDto> => {
    const response = await this.tournamentControllerGetBracketRaw({ id: id });
    return await response.value();
  };

  useTournamentControllerGetBracket(id: number, config?: ConfigInterface<BracketDto, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.tournamentControllerGetBracketContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.tournamentControllerGetBracket(id!) : undefined, config);
  }

  /**
   */
  private async tournamentControllerGetTournamentRaw(
    requestParameters: TournamentControllerGetTournamentRequest
  ): Promise<runtime.ApiResponse<TournamentDto>> {
    this.tournamentControllerGetTournamentValidation(requestParameters);
    const context = this.tournamentControllerGetTournamentContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TournamentDtoFromJSON(jsonValue));
  }

  /**
   */
  private tournamentControllerGetTournamentValidation(requestParameters: TournamentControllerGetTournamentRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling tournamentControllerGetTournament."
      );
    }
  }

  /**
   */
  tournamentControllerGetTournamentContext(
    requestParameters: TournamentControllerGetTournamentRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/tournament/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tournamentControllerGetTournament = async (id: number): Promise<TournamentDto> => {
    const response = await this.tournamentControllerGetTournamentRaw({ id: id });
    return await response.value();
  };

  useTournamentControllerGetTournament(id: number, config?: ConfigInterface<TournamentDto, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.tournamentControllerGetTournamentContext({ id: id! });
    return useSWR(
      JSON.stringify(context),
      valid ? () => this.tournamentControllerGetTournament(id!) : undefined,
      config
    );
  }

  /**
   */
  private async tournamentControllerListTournamentsRaw(): Promise<runtime.ApiResponse<Array<TournamentDto>>> {
    this.tournamentControllerListTournamentsValidation();
    const context = this.tournamentControllerListTournamentsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TournamentDtoFromJSON));
  }

  /**
   */
  private tournamentControllerListTournamentsValidation() {}

  /**
   */
  tournamentControllerListTournamentsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/tournament/list`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tournamentControllerListTournaments = async (): Promise<Array<TournamentDto>> => {
    const response = await this.tournamentControllerListTournamentsRaw();
    return await response.value();
  };

  useTournamentControllerListTournaments(config?: ConfigInterface<Array<TournamentDto>, Error>) {
    let valid = true;

    const context = this.tournamentControllerListTournamentsContext();
    return useSWR(
      JSON.stringify(context),
      valid ? () => this.tournamentControllerListTournaments() : undefined,
      config
    );
  }

  /**
   */
  private async tournamentControllerTournamentTeamsRaw(
    requestParameters: TournamentControllerTournamentTeamsRequest
  ): Promise<runtime.ApiResponse<Array<CompactTeamDto>>> {
    this.tournamentControllerTournamentTeamsValidation(requestParameters);
    const context = this.tournamentControllerTournamentTeamsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(CompactTeamDtoFromJSON));
  }

  /**
   */
  private tournamentControllerTournamentTeamsValidation(requestParameters: TournamentControllerTournamentTeamsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling tournamentControllerTournamentTeams."
      );
    }
  }

  /**
   */
  tournamentControllerTournamentTeamsContext(
    requestParameters: TournamentControllerTournamentTeamsRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/tournament/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tournamentControllerTournamentTeams = async (id: number): Promise<Array<CompactTeamDto>> => {
    const response = await this.tournamentControllerTournamentTeamsRaw({ id: id });
    return await response.value();
  };

  useTournamentControllerTournamentTeams(id: number, config?: ConfigInterface<Array<CompactTeamDto>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.tournamentControllerTournamentTeamsContext({ id: id! });
    return useSWR(
      JSON.stringify(context),
      valid ? () => this.tournamentControllerTournamentTeams(id!) : undefined,
      config
    );
  }
}
