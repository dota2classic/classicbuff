/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  TournamentParticipantDto,
  TournamentParticipantDtoFromJSON,
  TournamentParticipantDtoFromJSONTyped,
  TournamentParticipantDtoToJSON,
  TournamentStandingDto,
  TournamentStandingDtoFromJSON,
  TournamentStandingDtoFromJSONTyped,
  TournamentStandingDtoToJSON
} from "./";

/**
 *
 * @export
 * @interface FullTournamentDto
 */
export interface FullTournamentDto {
  /**
   *
   * @type {string}
   * @memberof FullTournamentDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof FullTournamentDto
   */
  entryType: FullTournamentDtoEntryTypeEnum;
  /**
   *
   * @type {number}
   * @memberof FullTournamentDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof FullTournamentDto
   */
  status: FullTournamentDtoStatusEnum;
  /**
   *
   * @type {number}
   * @memberof FullTournamentDto
   */
  startDate: number;
  /**
   *
   * @type {string}
   * @memberof FullTournamentDto
   */
  imageUrl: string;
  /**
   *
   * @type {boolean}
   * @memberof FullTournamentDto
   */
  isLocked: boolean;
  /**
   *
   * @type {boolean}
   * @memberof FullTournamentDto
   */
  isParticipating: boolean;
  /**
   *
   * @type {Array<TournamentParticipantDto>}
   * @memberof FullTournamentDto
   */
  participants: Array<TournamentParticipantDto>;
  /**
   *
   * @type {Array<TournamentStandingDto>}
   * @memberof FullTournamentDto
   */
  standings?: Array<TournamentStandingDto>;
  /**
   *
   * @type {string}
   * @memberof FullTournamentDto
   */
  description: string;
}

export function FullTournamentDtoFromJSON(json: any): FullTournamentDto {
  return FullTournamentDtoFromJSONTyped(json, false);
}

export function FullTournamentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullTournamentDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json["name"],
    entryType: json["entryType"],
    id: json["id"],
    status: json["status"],
    startDate: json["startDate"],
    imageUrl: json["imageUrl"],
    isLocked: json["isLocked"],
    isParticipating: json["isParticipating"],
    participants: (json["participants"] as Array<any>).map(TournamentParticipantDtoFromJSON),
    standings: !exists(json, "standings")
      ? undefined
      : (json["standings"] as Array<any>).map(TournamentStandingDtoFromJSON),
    description: json["description"]
  };
}

export function FullTournamentDtoToJSON(value?: FullTournamentDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    entryType: value.entryType,
    id: value.id,
    status: value.status,
    startDate: value.startDate,
    imageUrl: value.imageUrl,
    isLocked: value.isLocked,
    isParticipating: value.isParticipating,
    participants: (value.participants as Array<any>).map(TournamentParticipantDtoToJSON),
    standings:
      value.standings === undefined ? undefined : (value.standings as Array<any>).map(TournamentStandingDtoToJSON),
    description: value.description
  };
}

/**
 * @export
 * @enum {string}
 */
export enum FullTournamentDtoEntryTypeEnum {
  PLAYER = "PLAYER",
  TEAM = "TEAM"
}
/**
 * @export
 * @enum {string}
 */
export enum FullTournamentDtoStatusEnum {
  NEW = "NEW",
  ONGOING = "ONGOING",
  FINISHED = "FINISHED",
  CANCELLED = "CANCELLED"
}
