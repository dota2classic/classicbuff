/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ParticipantResultDto,
  ParticipantResultDtoFromJSON,
  ParticipantResultDtoFromJSONTyped,
  ParticipantResultDtoToJSON,
  TournamentBracketMatchGameDto,
  TournamentBracketMatchGameDtoFromJSON,
  TournamentBracketMatchGameDtoFromJSONTyped,
  TournamentBracketMatchGameDtoToJSON
} from "./";

/**
 *
 * @export
 * @interface TournamentBracketMatchDto
 */
export interface TournamentBracketMatchDto {
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  stageId: number;
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  groupId: number;
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  roundId: number;
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  childCount: number;
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  number: number;
  /**
   *
   * @type {number}
   * @memberof TournamentBracketMatchDto
   */
  startDate: number;
  /**
   *
   * @type {string}
   * @memberof TournamentBracketMatchDto
   */
  status: TournamentBracketMatchDtoStatusEnum;
  /**
   *
   * @type {ParticipantResultDto}
   * @memberof TournamentBracketMatchDto
   */
  opponent1?: ParticipantResultDto;
  /**
   *
   * @type {ParticipantResultDto}
   * @memberof TournamentBracketMatchDto
   */
  opponent2?: ParticipantResultDto;
  /**
   *
   * @type {Array<TournamentBracketMatchGameDto>}
   * @memberof TournamentBracketMatchDto
   */
  games: Array<TournamentBracketMatchGameDto>;
}

export function TournamentBracketMatchDtoFromJSON(json: any): TournamentBracketMatchDto {
  return TournamentBracketMatchDtoFromJSONTyped(json, false);
}

export function TournamentBracketMatchDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): TournamentBracketMatchDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    stageId: json["stage_id"],
    groupId: json["group_id"],
    roundId: json["round_id"],
    childCount: json["child_count"],
    number: json["number"],
    startDate: json["startDate"],
    status: json["status"],
    opponent1: !exists(json, "opponent1") ? undefined : ParticipantResultDtoFromJSON(json["opponent1"]),
    opponent2: !exists(json, "opponent2") ? undefined : ParticipantResultDtoFromJSON(json["opponent2"]),
    games: (json["games"] as Array<any>).map(TournamentBracketMatchGameDtoFromJSON)
  };
}

export function TournamentBracketMatchDtoToJSON(value?: TournamentBracketMatchDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    stage_id: value.stageId,
    group_id: value.groupId,
    round_id: value.roundId,
    child_count: value.childCount,
    number: value.number,
    startDate: value.startDate,
    status: value.status,
    opponent1: ParticipantResultDtoToJSON(value.opponent1),
    opponent2: ParticipantResultDtoToJSON(value.opponent2),
    games: (value.games as Array<any>).map(TournamentBracketMatchGameDtoToJSON)
  };
}

/**
 * @export
 * @enum {string}
 */
export enum TournamentBracketMatchDtoStatusEnum {
  Locked = "Locked",
  Waiting = "Waiting",
  Ready = "Ready",
  Running = "Running",
  Completed = "Completed",
  Archived = "Archived"
}
