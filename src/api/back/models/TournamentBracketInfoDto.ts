/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  TournamentBracketMatchDto,
  TournamentBracketMatchDtoFromJSON,
  TournamentBracketMatchDtoFromJSONTyped,
  TournamentBracketMatchDtoToJSON,
  TournamentBracketParticipantDto,
  TournamentBracketParticipantDtoFromJSON,
  TournamentBracketParticipantDtoFromJSONTyped,
  TournamentBracketParticipantDtoToJSON
} from "./";

/**
 *
 * @export
 * @interface TournamentBracketInfoDto
 */
export interface TournamentBracketInfoDto {
  /**
   *
   * @type {Array<TournamentBracketParticipantDto>}
   * @memberof TournamentBracketInfoDto
   */
  participant: Array<TournamentBracketParticipantDto>;
  /**
   *
   * @type {Array<object>}
   * @memberof TournamentBracketInfoDto
   */
  stage: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof TournamentBracketInfoDto
   */
  group: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof TournamentBracketInfoDto
   */
  round: Array<object>;
  /**
   *
   * @type {Array<TournamentBracketMatchDto>}
   * @memberof TournamentBracketInfoDto
   */
  match: Array<TournamentBracketMatchDto>;
}

export function TournamentBracketInfoDtoFromJSON(json: any): TournamentBracketInfoDto {
  return TournamentBracketInfoDtoFromJSONTyped(json, false);
}

export function TournamentBracketInfoDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): TournamentBracketInfoDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    participant: (json["participant"] as Array<any>).map(TournamentBracketParticipantDtoFromJSON),
    stage: json["stage"],
    group: json["group"],
    round: json["round"],
    match: (json["match"] as Array<any>).map(TournamentBracketMatchDtoFromJSON)
  };
}

export function TournamentBracketInfoDtoToJSON(value?: TournamentBracketInfoDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    participant: (value.participant as Array<any>).map(TournamentBracketParticipantDtoToJSON),
    stage: value.stage,
    group: value.group,
    round: value.round,
    match: (value.match as Array<any>).map(TournamentBracketMatchDtoToJSON)
  };
}
