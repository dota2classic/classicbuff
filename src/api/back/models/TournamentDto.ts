/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface TournamentDto
 */
export interface TournamentDto {
  /**
   *
   * @type {string}
   * @memberof TournamentDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TournamentDto
   */
  entryType: TournamentDtoEntryTypeEnum;
  /**
   *
   * @type {number}
   * @memberof TournamentDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof TournamentDto
   */
  status: TournamentDtoStatusEnum;
  /**
   *
   * @type {number}
   * @memberof TournamentDto
   */
  startDate: number;
  /**
   *
   * @type {string}
   * @memberof TournamentDto
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof TournamentDto
   */
  description: string;
}

export function TournamentDtoFromJSON(json: any): TournamentDto {
  return TournamentDtoFromJSONTyped(json, false);
}

export function TournamentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TournamentDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json["name"],
    entryType: json["entryType"],
    id: json["id"],
    status: json["status"],
    startDate: json["startDate"],
    imageUrl: json["imageUrl"],
    description: json["description"]
  };
}

export function TournamentDtoToJSON(value?: TournamentDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    entryType: value.entryType,
    id: value.id,
    status: value.status,
    startDate: value.startDate,
    imageUrl: value.imageUrl,
    description: value.description
  };
}

/**
 * @export
 * @enum {string}
 */
export enum TournamentDtoEntryTypeEnum {
  PLAYER = "PLAYER",
  TEAM = "TEAM"
}
/**
 * @export
 * @enum {string}
 */
export enum TournamentDtoStatusEnum {
  NEW = "NEW",
  ONGOING = "ONGOING",
  FINISHED = "FINISHED",
  CANCELLED = "CANCELLED"
}
